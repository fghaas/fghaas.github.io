<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>xahteiwi.eu - CI</title><link>https://xahteiwi.eu/</link><description></description><lastBuildDate>Sun, 26 Jun 2022 20:00:00 +0000</lastBuildDate><item><title>Python package dependency checking in a CI pipeline with pipdeptree</title><link>https://xahteiwi.eu/resources/hints-and-kinks/pipdeptree-ci/</link><description>&lt;p&gt;Sometimes pip behaves rather oddly when it comes to package dependency resolution. Here’s one way to catch such issues in your CI pipeline.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Florian Haas</dc:creator><pubDate>Sun, 26 Jun 2022 20:00:00 +0000</pubDate><guid isPermaLink="false">tag:xahteiwi.eu,2022-06-26:/resources/hints-and-kinks/pipdeptree-ci/</guid><category>hints-and-kinks</category><category>Python</category><category>CI</category></item><item><title>Drizzle: the most influential software project you’ve (probably) never heard of</title><link>https://xahteiwi.eu/blog/2022/05/10/drizzle/</link><description>&lt;p&gt;Drizzle aimed to rewrite the MySQL database server. It instead rewrote collaborative software development.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Florian Haas</dc:creator><pubDate>Tue, 10 May 2022 17:15:00 +0000</pubDate><guid isPermaLink="false">tag:xahteiwi.eu,2022-05-10:/blog/2022/05/10/drizzle/</guid><category>blog</category><category>Development</category><category>CI</category><category>MySQL</category><category>OpenStack</category></item><item><title>The Review Review</title><link>https://xahteiwi.eu/blog/2022/01/29/review-review/</link><description>&lt;p&gt;Musings on source code management, code review, testing, deployment, and collaboration culture.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Florian Haas</dc:creator><pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:xahteiwi.eu,2022-01-29:/blog/2022/01/29/review-review/</guid><category>blog</category><category>Work</category><category>CI</category><category>Gerrit</category><category>GitLab</category><category>GitHub</category><category>Zuul</category></item><item><title>Universal tox tests (from just about any CI)</title><link>https://xahteiwi.eu/resources/hints-and-kinks/universal-tox-tests/</link><description>&lt;p&gt;I like tox. A lot. I use it all the time. This is a quick summary on how to use it in such a way that it becomes a central anchor point that you can use from all your CI systems.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Florian Haas</dc:creator><pubDate>Sun, 17 Oct 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:xahteiwi.eu,2021-10-17:/resources/hints-and-kinks/universal-tox-tests/</guid><category>hints-and-kinks</category><category>CI</category><category>Python</category><category>GitLab</category><category>GitHub</category><category>Zuul</category></item><item><title>Using coverage with multiple parallel GitLab CI jobs</title><link>https://xahteiwi.eu/resources/hints-and-kinks/coverage-gitlab-ci/</link><description>&lt;p&gt;If you ever write unit tests in Python, you are probably familiar with Ned Batchelder’s &lt;code&gt;coverage&lt;/code&gt; tool. This article explains how you can use &lt;code&gt;coverage&lt;/code&gt; in combination with &lt;code&gt;tox&lt;/code&gt; and a GitLab CI pipeline, for coverage reports in your Python code.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Florian Haas</dc:creator><pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:xahteiwi.eu,2019-03-10:/resources/hints-and-kinks/coverage-gitlab-ci/</guid><category>hints-and-kinks</category><category>Python</category><category>CI</category><category>GitLab</category></item></channel></rss>