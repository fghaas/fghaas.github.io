<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>xahteiwi.eu - Git</title><link href="https://xahteiwi.eu/" rel="alternate"></link><link href="https://xahteiwi.eu/feeds/tag/git.atom.xml" rel="self"></link><id>https://xahteiwi.eu/</id><updated>2023-01-06T18:00:00+00:00</updated><entry><title>Handy Git aliases</title><link href="https://xahteiwi.eu/resources/hints-and-kinks/git-aliases/" rel="alternate"></link><published>2023-01-06T18:00:00+00:00</published><updated>2023-01-06T18:00:00+00:00</updated><author><name>Florian Haas</name></author><id>tag:xahteiwi.eu,2023-01-06:/resources/hints-and-kinks/git-aliases/</id><summary type="html">&lt;p&gt;I keep a few aliases in my ~/.gitconfig that you might find useful, too.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I use Git on a practically daily basis, and although it comes with
just about everything including the proverbial kitchen sink, there are
a few bits of functionality that I only &lt;em&gt;wish&lt;/em&gt; it had. Luckily, Git’s
functionality is almost indefinitely extensible via the use of
aliases.&lt;/p&gt;
&lt;p&gt;So, here are some that I define in my &lt;code&gt;~/.gitconfig&lt;/code&gt; file, with a
brief explanation of what they’re good for:&lt;/p&gt;
&lt;h2&gt;List branches by their date of last modification&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[alias]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;recent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;branch --sort=-committerdate --format=\"%(committerdate:relative)%09%(refname:short)\"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I frequently have a pretty large number of topic branches that I work
on, plus ones that I pull in from other people’s remotes for local
review. So it’s helpful to know which branches in my checkout were
most recently updated, and I can run &lt;code&gt;git recent&lt;/code&gt; to do that.&lt;/p&gt;
&lt;h2&gt;Delete old topic branches that have been merged&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[alias]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;delete-merged-branches&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;!git branch --merged | grep -Ev '(main|master)' | xargs -prn1 git branch -d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I create a topic branch for everything that needs to be reviewed and
merged to &lt;code&gt;main&lt;/code&gt; at some point. That means it’s not unheard of that I
create dozens of them each month, and they quickly accumulate. If I
did not regularly prune old topic branches, my Git checkouts would
become unmanageable pretty quickly.&lt;/p&gt;
&lt;p&gt;So, I use my &lt;code&gt;git delete-merged-branches&lt;/code&gt; command to remove those
local branches that are fully merged to &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Find the origin of a branch point&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[alias]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="na"&gt;oldest-ancestor&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;!bash -c 'diff -u &amp;lt;(git rev-list --first-parent \"${1:-main}\") &amp;lt;(git rev-list --first-parent \"${2:-HEAD}\") | sed -ne \"s/^ //p\" | head -1' -&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes I create a topic branch off &lt;code&gt;main&lt;/code&gt;, then add oodles of
commits on it. At the same time, more commits land on &lt;code&gt;main&lt;/code&gt;, and
eventually I forget which commit I based my branch on.&lt;/p&gt;
&lt;p&gt;Then, I can use &lt;code&gt;git oldest-ancestor&lt;/code&gt; to retrace my branch point,
like so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git oldest-ancestor foo bar&lt;/code&gt;: find out at which commit &lt;code&gt;bar&lt;/code&gt;
  branched off &lt;code&gt;foo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git oldest-ancestor foo&lt;/code&gt;: find out at which commit the currently
  checked-out branch branched off &lt;code&gt;foo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git oldest-ancestor&lt;/code&gt;: find out at which commit the currently
  checked-out branch branched off &lt;code&gt;main&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;I seem to recall I learned this trick from a Stack Overflow
discussion, which I can’t find anymore. What I &lt;em&gt;have&lt;/em&gt; found is a
similar implementation from &lt;a href="https://www.lee-dohm.com/"&gt;Lee Dohm&lt;/a&gt;
that is MIT licensed:
&lt;a href="https://github.com/lee-dohm/dotfiles/blob/main/bin/git-oldest-ancestor"&gt;&lt;code&gt;git-oldest-ancestor&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Fix trailing whitespace&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[alias]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;fixws&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;!git diff-index --check --cached HEAD -- | sed /^[+-]/d | sed -r s/:[0-9]+:.*// | uniq | xargs sed -e s/[[:space:]]*$// -i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I usually want to avoid committing changes with extraneous
whitespace, and if I enable the default &lt;code&gt;pre-commit&lt;/code&gt; script that
lives in a &lt;code&gt;.git/hooks&lt;/code&gt; directory by dropping &lt;code&gt;.sample&lt;/code&gt; off its
filename, Git will even enforce this as a pre-commit rule.&lt;/p&gt;
&lt;p&gt;So what I do is this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I try &lt;code&gt;git commit&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Git complains about trailing whitespace.&lt;/li&gt;
&lt;li&gt;I run &lt;code&gt;git fixws&lt;/code&gt;, and repeat my &lt;code&gt;git commit&lt;/code&gt; command.&lt;/li&gt;
&lt;/ul&gt;</content><category term="hints-and-kinks"></category><category term="Git"></category></entry></feed>